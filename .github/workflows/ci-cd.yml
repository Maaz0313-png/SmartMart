name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: smartmart_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php-version: [8.2, 8.3]
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Copy environment file
      run: cp .env.example .env

    - name: Update environment file for testing
      run: |
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=smartmart_test/' .env
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env
        sed -i 's/REDIS_HOST=.*/REDIS_HOST=127.0.0.1/' .env
        sed -i 's/REDIS_PORT=.*/REDIS_PORT=6379/' .env
        echo "BCRYPT_ROUNDS=4" >> .env
        echo "CACHE_DRIVER=array" >> .env
        echo "MAIL_MAILER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "SESSION_DRIVER=array" >> .env

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.lock') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Install npm dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Generate application key
      run: php artisan key:generate

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Seed database with test data
      run: php artisan db:seed --class=RolesAndPermissionsSeeder

    - name: Clear and cache config
      run: |
        php artisan config:clear
        php artisan config:cache

    - name: Run PHP Code Sniffer
      run: ./vendor/bin/phpcs app/ --standard=PSR12

    - name: Run PHPStan static analysis
      run: ./vendor/bin/phpstan analyse app/ --level=5

    - name: Run PHP unit tests
      run: php artisan test --coverage-clover=coverage.xml

    - name: Run Pest tests
      run: ./vendor/bin/pest --coverage

    - name: Run frontend tests
      run: npm run test

    - name: Run frontend linting
      run: npm run lint

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: php-${{ matrix.php-version }}

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run security audit
      run: composer audit

    - name: Run PHP Security Checker
      run: ./vendor/bin/security-checker security:check composer.lock

    - name: Run npm security audit
      run: npm audit --audit-level=high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        npm ci

    - name: Build assets
      run: npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, ssh, or deployment service API calls

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        npm ci

    - name: Build assets
      run: npm run production

    - name: Run database backup
      run: |
        echo "Creating database backup before deployment..."
        # Add backup commands here

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

    - name: Run post-deployment tasks
      run: |
        echo "Running post-deployment tasks..."
        # Add post-deployment commands like:
        # - Clear caches
        # - Run migrations
        # - Restart services
        # - Warm up caches

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
          echo "‚úÖ All tests passed and security checks completed"
        else
          echo "‚ùå Tests failed or security issues found"
        fi
        
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "üöÄ Staging deployment successful"
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "üéâ Production deployment successful"
        fi